Initial version done with LOTS of help from Cale Gibbard (at Compose Conference 2016).

* TODO:

- make sort of dropdown contents work
- handle data model literals correctly (e.g., @en on strings but not numbers)

#+BEGIN_EXAMPLE
curl 127.0.0.1:3030/ds/query?query=SELECT%20?subject%20?predicate%20%20WHERE%20%7B%20?subject%20?predicate%20%22Excellence%20in%20the%20Community@en%22%20.%7D
#+END_EXAMPLE

* DONE:

- Submit: sending XhrRequest and getting back SPARQL results.
- Aeson parsing and manual collating results.
- Filled in panels with results of submit/SPARQL results.
- first query on panel select works.
- panel refill with selection, done via

#+BEGIN_EXAMPLE
I did not ask the question clearly.  Let me try again.
I have one event that fires.  It triggers an async request.
I need to combine info from the initial event and the response to the request.
In pseudo-code (and leaving out steps), something like:
Event Request : already fired
Event XhrResponse = performRequestAsync Event Request
return $ combine Event Request + Event XhrResponse

<Cale> Ah, okay -- the best way to do that is (perhaps a little unintuitively) to use                                            [15:21]
<Cale> performRequestsAsync :: (Traversable f, MonadWidget t m) =>
                               Event t (f XhrRequest) -> m (Event t (f XhrResponse))
<Cale> The key thing here is that for any type e, we have that (,) e is an instance of Traversable
<Cale> So for example, if we do  fmap (\x -> (x,x)) on the Event t XhrRequest 
       to turn it into an Event t (XhrRequest, XhrRequest)
<Cale> then the result will be an Event t (XhrRequest, XhrResponse)
<Cale> You can put anything you'd like in the first component of the pair, and
       it'll pair that information with the corresponding response
#+END_EXAMPLE

- literals quoted before sending on SPARQL query
- added tracing of SPARQL results
- only set frame =src= if startsWith =http=
- put =@en= on end of literals (to make SPARQL queries work)
- build via work-on
  - https://github.com/reflex-frp/reflex-dom-contrib
#+BEGIN_EXAMPLE
cd .
make wo
make data
make c
make b
make w
#+END_EXAMPLE
- use real URL Encoder
- placing stuff via CSS
  - http://stackoverflow.com/a/20179337/814846 (scroll down to end of answer)
- do not change iframe =src= on non-URLs
- expand/contract dropdown contents

* wiring diagram

file:./wiring-diagram.jpg

